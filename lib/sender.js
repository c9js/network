/*▄────────────────────▄
  █                    █
  █  Загрузка модулей  █
  █                    █
  ▀────────────────────▀*/
const { Sender } = require('l2raw'); // Работа с RAW-пакетами на уровне L2

/*▄────────────────────▄
  █                    █
  █  Создает приемник  █
  █                    █
  ▀────────────────────▀*/
module.exports = class {
/*┌──────────────────────────────┐
  │ Очередь для отправки пакетов │
  └──────────────────────────────┘*/
    list = []
    
/*┌─────────────┐
  │ Конструктор │
  └─────────────┘*/
    constructor(ctx) {
    // Сохраняем родительский контекст
        this.ctx = ctx;
        
    // Создаем передатчик
        this.sender = new Sender({
            iface: this.ctx.options.iface, // Имя сетевого интерфейса
        });
        
    // Добавляем обработчик отправки пакетов
        this.sender.on('data', this.data);
    }
    
/*┌──────────────────────────────────────────────────┐
  │ Добавляет новое сообщение в очередь для отправки │
  └──────────────────────────────────────────────────┘*/
    addMessage = (message) => this.ctx.cryptoBuffer.addMessage(this.list, message)
    
/*┌─────────────────────────────┐
  │ Обработчик отправки пакетов │
  └─────────────────────────────┘*/
    data = (packetBuffer) => {
    }
};
