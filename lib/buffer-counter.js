/*▄────────────────────────────▄
  █                            █
  █  Создает буферный счетчик  █
  █                            █
  ▀────────────────────────────▀*/
module.exports = class {
/*┌─────────────┐
  │ Конструктор │
  └─────────────┘*/
    constructor(byteLength = 2) {
    // Создаем буфер (по умолчанию 2 байта)
        this.buffer = Buffer.alloc(byteLength);
        
    // Возвращаем функцию-обёртку для управления буферным счётчиком
    // Список команд:
    //   counter `++buffer` — Увеличивает буферный счетчик (+1)
    //   counter `--buffer` — Уменьшает буферный счетчик (-1)
    //   counter `buffer`   — Возвращает текущий буфер
        return (command = []) => {
            switch (command[0]) {
            // Увеличиваем буферный счетчик (+1)
                case '++buffer': return this.increment();
                
            // Уменьшаем буферный счетчик (-1)
                case '--buffer': return this.decrement();
            }
            
        // Возвращаем текущий буфер
            return this.buffer;
        };
    }
    
/*┌───────────────────────────────────┐
  │ Увеличивает буферный счетчик (+1) │
  └───────────────────────────────────┘*/
    increment() {
    // Проходим по байтам с конца буфера (младший байт — последний индекс)
        for (let i = this.buffer.length - 1; i >= 0; i--) {
        // Увеличиваем значение текущего байта на 1 (0..255)
            this.buffer[i]++;
            
        // Проверяем выход за пределы (255 + 1 = 0)
        // Если байт не сбросился в 0, прерываем цикл
        // Иначе переходим к следующему (старшему) байту
            if (this.buffer[i] != 0) break;
        }
        
    // Возвращаем обновлённый буфер
        return this.buffer;
    }
    
/*┌─────────────────────────────────┐
  │ Уменьшает буферный счетчик (-1) │
  └─────────────────────────────────┘*/
    decrement() {
    // Проходим по байтам с конца буфера (младший байт — последний индекс)
        for (let i = this.buffer.length - 1; i >= 0; i--) {
        // Уменьшаем значение текущего байта на 1 (0..255)
            this.buffer[i]--;
            
        // Проверяем выход за пределы (0 - 1 = 255)
        // Если байт не сбросился в 255, прерываем цикл
        // Иначе переходим к следующему (старшему) байту
            if (this.buffer[i] != 255) break;
        }
        
    // Возвращаем обновлённый буфер
        return this.buffer;
    }
};

// const BufferCounter = require('../lib/buffer-counter'); // Буферный счетчик
